---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: admin-service
  labels:
    app: admin-service
spec:
  selector:
    matchLabels:
      app: admin-service
  replicas: {{ .Values.admin.replicas }}
  strategy:
    rollingUpdate:
      maxSurge: 50%
      maxUnavailable: 70%
    type: RollingUpdate
  template:
    metadata:
      labels:
        app: admin-service
        role_curri_api: {{ .Values.admin.api_worker | quote }}
    spec:
      securityContext:
        runAsUser: {{ .Values.userid }}
      tolerations:
        - effect: NoExecute
          key: node.kubernetes.io/unreachable
          operator: Exists
          tolerationSeconds: 2
        - effect: NoExecute
          key: node.kubernetes.io/not-ready
          operator: Exists
          tolerationSeconds: 2
      terminationGracePeriodSeconds: 5
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app
                  operator: In
                  values:
                  - {{ .Release.Name }}-admin-service
              topologyKey: "kubernetes.io/hostname"
      containers:
        - name: {{ .Release.Name }}-admin
          image: {{ .Values.admin.image }}
          imagePullPolicy: {{ .Values.admin.imagePullPolicy }}
          ports:
            {{- range .Values.admin.container_ports }}
            - containerPort: {{ .port }}
              name: {{ .name }}
            {{- end }}
          resources:
            requests:
              memory: "256Mi"
              cpu: "100m"
            limits:
              cpu: {{ .Values.admin.cpus }}
          livenessProbe:
            httpGet:
              scheme: HTTP
              path: /healthz
              port: 4080
            initialDelaySeconds: 15
            periodSeconds: 3
          readinessProbe:
            httpGet:
              scheme: HTTP
              path: /healthz
              port: 4080
            initialDelaySeconds: 3
            periodSeconds: 3
          env:
            - name: EXTERNAL_IP
              value: {{ .Values.hostname | quote }}
            - name: DB_USER
              valueFrom:
                secretKeyRef:
                  name: {{ if .Values.db.useExistingSecret }}{{ .Values.db.existingSecretName }}{{ else }}{{ .Release.Name }}-db-secret{{ end }}
                  key: db_user
            - name: DB_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ if .Values.db.useExistingSecret }}{{ .Values.db.existingSecretName }}{{ else }}{{ .Release.Name }}-db-secret{{ end }}
                  key: db_password
            - name: DB_NAME
              valueFrom:
                secretKeyRef:
                  name: {{ if .Values.db.useExistingSecret }}{{ .Values.db.existingSecretName }}{{ else }}{{ .Release.Name }}-db-secret{{ end }}
                  key: db_name
            - name: DB_HOSTNAME
              valueFrom:
                secretKeyRef:
                  name: {{ if .Values.db.useExistingSecret }}{{ .Values.db.existingSecretName }}{{ else }}{{ .Release.Name }}-db-secret{{ end }}
                  key: db_hostname
            - name: DB_PORT
              valueFrom:
                secretKeyRef:
                  name: {{ if .Values.db.useExistingSecret }}{{ .Values.db.existingSecretName }}{{ else }}{{ .Release.Name }}-db-secret{{ end }}
                  key: db_port
            - name: DB_SSL_ENABLED
              valueFrom:
                secretKeyRef:
                  name: {{ if .Values.db.useExistingSecret }}{{ .Values.db.existingSecretName }}{{ else }}{{ .Release.Name }}-db-secret{{ end }}
                  key: db_ssl_enabled
            - name: CDR_ROOT_PATH
              value: {{ .Values.cdr_root_path | quote }}
            - name: LOGGING_LEVEL
              value: {{ .Values.admin.logging_level | quote }}
            - name: LOCAL_NATS
              value: {{ .Values.nats_server | quote }}
            - name: WORKER_NODE
              value: "{{ if .Values.admin.api_worker }}TRUE{{ else }}FALSE{{ end }}"
            - name: ADMIN_NODE
              value: "TRUE"
            - name: HTTP_ADAPTER
              value: "HACKNEY"
            - name: CERT_KEY
              value: "/home/app/cert/appliance_key.pem"
            - name: CERT_PUBLIC
              value: "/home/app/cert/appliance.pem"
            - name: TEAMS_SERVICE_NAME
              value: {{ .Values.teams_service_name | quote }}
